# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tf2_msgs/LookupTransformGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class LookupTransformGoal(genpy.Message):
  _md5sum = "35e3720468131d675a18bb6f3e5f22f8"
  _type = "tf2_msgs/LookupTransformGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#Simple API
string target_frame
string source_frame
time source_time
duration timeout

#Advanced API
time target_time
string fixed_frame

#Whether or not to use the advanced API
bool advanced

"""
  __slots__ = ['target_frame','source_frame','source_time','timeout','target_time','fixed_frame','advanced']
  _slot_types = ['string','string','time','duration','time','string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_frame,source_frame,source_time,timeout,target_time,fixed_frame,advanced

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LookupTransformGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target_frame is None:
        self.target_frame = ''
      if self.source_frame is None:
        self.source_frame = ''
      if self.source_time is None:
        self.source_time = genpy.Time()
      if self.timeout is None:
        self.timeout = genpy.Duration()
      if self.target_time is None:
        self.target_time = genpy.Time()
      if self.fixed_frame is None:
        self.fixed_frame = ''
      if self.advanced is None:
        self.advanced = False
    else:
      self.target_frame = ''
      self.source_frame = ''
      self.source_time = genpy.Time()
      self.timeout = genpy.Duration()
      self.target_time = genpy.Time()
      self.fixed_frame = ''
      self.advanced = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.target_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.source_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I2i2I().pack(_x.source_time.secs, _x.source_time.nsecs, _x.timeout.secs, _x.timeout.nsecs, _x.target_time.secs, _x.target_time.nsecs))
      _x = self.fixed_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.advanced
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.source_time is None:
        self.source_time = genpy.Time()
      if self.timeout is None:
        self.timeout = genpy.Duration()
      if self.target_time is None:
        self.target_time = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_frame = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.source_time.secs, _x.source_time.nsecs, _x.timeout.secs, _x.timeout.nsecs, _x.target_time.secs, _x.target_time.nsecs,) = _get_struct_2I2i2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fixed_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fixed_frame = str[start:end]
      start = end
      end += 1
      (self.advanced,) = _get_struct_B().unpack(str[start:end])
      self.advanced = bool(self.advanced)
      self.source_time.canon()
      self.timeout.canon()
      self.target_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.target_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.source_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I2i2I().pack(_x.source_time.secs, _x.source_time.nsecs, _x.timeout.secs, _x.timeout.nsecs, _x.target_time.secs, _x.target_time.nsecs))
      _x = self.fixed_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.advanced
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.source_time is None:
        self.source_time = genpy.Time()
      if self.timeout is None:
        self.timeout = genpy.Duration()
      if self.target_time is None:
        self.target_time = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_frame = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.source_time.secs, _x.source_time.nsecs, _x.timeout.secs, _x.timeout.nsecs, _x.target_time.secs, _x.target_time.nsecs,) = _get_struct_2I2i2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fixed_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fixed_frame = str[start:end]
      start = end
      end += 1
      (self.advanced,) = _get_struct_B().unpack(str[start:end])
      self.advanced = bool(self.advanced)
      self.source_time.canon()
      self.timeout.canon()
      self.target_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i2I = None
def _get_struct_2I2i2I():
    global _struct_2I2i2I
    if _struct_2I2i2I is None:
        _struct_2I2i2I = struct.Struct("<2I2i2I")
    return _struct_2I2i2I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
